<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DKay's Blog]]></title>
  <link href="http://insino.github.io/atom.xml" rel="self"/>
  <link href="http://insino.github.io/"/>
  <updated>2014-08-01T21:01:22-07:00</updated>
  <id>http://insino.github.io/</id>
  <author>
    <name><![CDATA[DKay]]></name>
    <email><![CDATA[dkay@kaist.ac.kr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(De)Soldering Tools]]></title>
    <link href="http://insino.github.io/blog/2014/07/31/de-soldering-tools/"/>
    <updated>2014-07-31T20:21:48-07:00</updated>
    <id>http://insino.github.io/blog/2014/07/31/de-soldering-tools</id>
    <content type="html"><![CDATA[<p>There are many tools used for soldering/desoldering. I would like to introduce those tools today.</p>

<!-- more -->


<h2><a id="solder_iron"></a> Soldering Iron</h2>

<p><img class="right" src="http://www.rcsoup.com/wp-content/uploads/2012/09/soldering_iron.jpg" width="350" height="350"></p>

<p><strong>Soldering Iron</strong> is a tool used when you melt lead. For soldering and desoldering, soldering iron is basic tool which you will always use.</p>

<p>When you use soldering iron, you need to consider the temperature. If the temperature is too high, then you can easily melt lead and solder the components. However, because of the high temperature, other chips nearby could be damaged. Also, you need to take which tip you will use into account because the shape of tips is critical to heat conductivity. Therefore, you need to <strong>choose right temperature, and right tips</strong> for your target chip.</p>

<p><img class="center" src="http://www.howardelectronics.com/xytronic/Images/TipsLF.jpg"></p>

<p>There are several opinions related to the temperature of soldering iron, and most people recomment 315°C. You can see the discussion at the following link.</p>

<ul>
<li><a href="http://electronics.stackexchange.com/questions/1980/what-s-the-proper-soldering-iron-temperature-for-standard-031-60-40-solder"><code>What’s the proper soldering iron temperature for standard .031" 60/40 solder?</code></a></li>
</ul>


<p>Also, there is a post which makes your own tips for soldering iron using copper wire. You can see this at the following link.</p>

<p><a href="http://www.instructables.com/id/Making-a-fine-tip-for-your-solding-iron-for-SMD-so/"><img class="center" src="http://cdn.instructables.com/F8G/X19D/FROA0ONL/F8GX19DFROA0ONL.MEDIUM.jpg" width="400" height="400"></a></p>

<ul>
<li><a href="http://www.instructables.com/id/Making-a-fine-tip-for-your-solding-iron-for-SMD-so/"><code>Making a fine tip for your solding iron for SMD soldering</code></a></li>
</ul>


<p>If the melted lead remains on the tip of soldering iron, it is really annoying when you solder a chip. Therefore, you need to clean the tips, and here is the tool, <strong>Tip Cleaner</strong></p>

<p><img class="center" src="http://www.hakko.com/english/images/products/products_hakko_599b_img.jpg" width="400" height="400"></p>

<h2><a id="heat_gun"></a> Heat Gun</h2>

<p><img class="right" src="http://i00.i.aliimg.com/img/pb/066/598/476/476598066_254.jpg" width="350" height="350"></p>

<p><strong>Heat Gun</strong> is a tool which blows hot air (similar temperature as soldring iron). While soldering iron melt lead on the surface touched by the tip, heat gun metls all lead at once. Therefore, it&rsquo;s really easy to desolder a chip using heat gun. However, there is disadvantage that because it melts all lead, <strong>other chips also can be detached from the board which is not intended</strong>. Also, the chips might be <strong>more damaged</strong> than soldering iron. Therefore, if you want to desolder a chip, then you need to consider carefully to choose the right tool between soldering iron and heat gun.</p>

<h2><a id="flux_helper"></a> Flux Pen &amp; Solder Paste</h2>

<p><img class="left" src="http://upload.wikimedia.org/wikipedia/commons/3/37/Flux_Pen.jpg" width="350" height="350"></p>

<p><strong>Flux Pen</strong> is a tool that when you want to solder a chip. These pens are usually made of rosin, which is based on real &lsquo;rosin&rsquo;. Rosin has good flux properties, a mixture of organic acids (resin acids, predominantly abietic acid, with pimaric acid, isopimaric acid, neoabietic acid, dihydroabietic acid, and dehydroabietic acid). Rosin is a glassy solid, virtually nonreactive and noncorrosive at normal temperature, but liquid, ionic and mildly reactive to metal oxides at molten state. Rosin tends to soften between 60-70 °C and is fully fluid at around 120 °C; molten rosin is weakly acidic and is able to dissolve thinner layers of surface oxides from copper without further additives. Therefore, If you just paint this pen at the target part and it&rsquo;s over, easy to solder. However, you need to <strong>clean up the leftover</strong> after you finished soldering because it could damage the circuit (short-circuit failure)</p>

<p><img class="right" src="http://upload.wikimedia.org/wikipedia/commons/8/8f/Manufacturing_paste.jpg" width="350" height="350"></p>

<p><strong>Solder Paste</strong> is used to connect the leads of surface mount integrated chip packages to attachment points in the circuit patterns on a printed circuit board as flux pen. Different from flux pen, solder paste include lead itself as a component. Therefore, you can do <strong>lead-free soldering</strong>.</p>

<p>You can choose what to use between flux pen and solder paste as you prefer.</p>

<h2><a id="cleaner"></a> Desoldering braid &amp; Desolder Pump</h2>

<p><strong>Desoldering Braid</strong>, also known as <strong>desoldering wick</strong> or <strong>solder wick</strong>, is finely braided 18 to 42 AWG copper wire coated with rosin flux, usually supplied on a roll. You can absorb melted lead using this.</p>

<p><img class="left" src="http://upload.wikimedia.org/wikipedia/commons/b/b0/Solder_wick_rolled.jpg" width="321" height="321">
<span class='caption-wrapper right'><img class='caption' src='http://upload.wikimedia.org/wikipedia/commons/0/07/Solder_wick-close_up-part_PNr%C2%B00104.jpg' width='400' height='200' title='Solder wick, before use'><span class='caption-text'>Solder wick, before use</span></span>
<span class='caption-wrapper right'><img class='caption' src='http://upload.wikimedia.org/wikipedia/commons/3/36/Solder_wick-close_up-solder_impurities_PNr%C2%B00112.jpg' width='400' height='200' title='Solder wick, after soaked'><span class='caption-text'>Solder wick, after soaked</span></span></p>

<p><strong>Desoldering Pump</strong> , colloquially known as a <strong>solder sucker</strong>, is a manually-operated device which is used to remove solder from a printed circuit board. After melting target lead, you can suck up it.</p>

<p><img class="center" src="http://upload.wikimedia.org/wikipedia/commons/b/b9/Solder_sucker.jpg" width="400" height="400"></p>

<h2><a id="fume_extractor"></a> Fume Extractor</h2>

<p><strong>Fume Extractor</strong> is a tool that inhales the smoke of lead, which could be harmful. However, the suction power may not be enough, so you need to work closer.</p>

<p><img class="center" src="http://i0.wp.com/make-images.s3.amazonaws.com/2JOYlu1G1KsoWRZI.jpg?resize=620%2C465" width="400" height="400"></p>

<h2><a id="fume_extractor"></a> In Summary</h2>

<p>I&rsquo;ve been talking about several tools that we can use in soldering and desoldering. There is only one thing that we should remember:</p>

<blockquote><p>Use right tool in right place.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Analyze Embedded Devices?]]></title>
    <link href="http://insino.github.io/blog/2014/07/25/how-to-analyze-embedded-devices/"/>
    <updated>2014-07-25T13:35:59-07:00</updated>
    <id>http://insino.github.io/blog/2014/07/25/how-to-analyze-embedded-devices</id>
    <content type="html"><![CDATA[<p>Yesterday there was a post in the <a href="http://www.xda-developers.com/android/samsung-gear-live-stock-firmware-image-pulled-temp-root/"><em>XDA Developers</em></a> saying that <a href="http://plus.adamoutler.com/">AdamOutler</a> again pulled out <a href="http://www.samsung.com/global/microsite/gear/gearlive_design.html"><em>Samsung Gear</em></a> live firmware image. He distributed custom kernel image and pulled images.</p>

<p><img class="center" src="http://insino.github.io/images/2014/07/25/gear.png"></p>

<p>Reading this article, I would like to sum-up the method to extract firmwares from embedded devices. So lets start.</p>

<!-- more -->


<h2><a id="serial"></a> Serial Communication</h2>

<p>Before start, we need to know about the <em>Serial Communication</em>. There are many kinds of serial communication, and we will look through some famous and popular methods. Nowadays, many people are confused about the definition of serial communication. However, it&rsquo;s really easy as it is written.</p>

<blockquote><p><strong>Serial communication</strong> is the process of sending data one bit at a time</p></blockquote>

<p>As you can find that on the <a href="http://en.wikipedia.org/wiki/Serial_communication">wikipedia</a>, we covers all the protocols that you might think. People usually think UART is the same as serial communication but it isn&rsquo;t. UART is just a kind of serial communication. Now have a look on different kinds.
Finding which interface is used by the device is quite tedious, that means you need to try all the methods using <a href="http://en.wikipedia.org/wiki/Logic_analyzer"><strong>Logic Analyzer</strong></a> or other connectors for each protocol.</p>

<h2><a id="uart"></a> UART</h2>

<p><img class="right" src="http://insino.github.io/images/2014/07/25/uart.JPG" width="250" height="250"></p>

<p><strong>UART</strong>, a short form of <em>Universal Asynchronous Receiver/Transmitter</em>, is a piece of computer hardware that translates data between parallel and serial forms. UARTs are commonly used in conjunction with communication standards such as EIA, RS-232, RS-422 or RS-485. The universal designation indicates that the data format and transmission speeds are configurable. The electric signaling levels and methods (such as differential signaling etc.) are handled by a driver circuit external to the UART.</p>

<p>For the convenience of debugging the devices, embedded devices often have debug ports with UART. When you put RX/TX part of UART connector, then you can easily see the debugging messages through it. The device on the right is one kind of UART-to-USB connector from FTDI, and you can connect to it via Serial.
Just put this device and download the drivers from <a href="http://www.ftdichip.com/Products/ICs/FT232R.htm"><em>FTDI</em></a>, then it&rsquo;s done! Below video is AdamOutler&rsquo;s finding UART interface in Samsung Gear. You can find UART interface as this video putting RX/TX pins to the device.</p>

<div style="text-align: center">
<iframe width="560" height="315" src="//www.youtube.com/embed/xvY2Y21EYWo" frameborder="0" allowfullscreen></iframe>
</div>


<h2><a id="jtag"></a> JTAG</h2>

<p><img class="right" src="http://insino.github.io/images/2014/07/25/olimex.JPG" width="250" height="250"></p>

<p><strong>JTAG</strong>, a short form of <em>Joint Test Action Group</em>, is the common name for the IEEE 1149.1 Standard Test Access Port and Boundary-Scan Architecture. It was initially devised by electronic engineers for testing printed circuit boards using boundary scan and is still widely used for this application.</p>

<p>With JTAG interface, you can attach debuggers to it. For example, GDB can be attached to your JTAG. There are several researches related to firmware analysis to find malwares on embedded devices.</p>

<ul>
<li><a href="http://www.syssec-project.eu/m/page-media/3/ndss14_zaddach.pdf">Avatar: A Framework to Support Dynamic Security Analysis of Embedded Systems’ Firmwares, Jonas Zaddach et al.</a>, utilized JTAG to perform symbolic execution with real-time environments.</li>
</ul>


<p>The device on the right image is <a href="https://www.olimex.com/Products/ARM/JTAG/ARM-USB-OCD/"><em>Olimex</em></a>. With this device, you can utilize OpenOCD which is a open source based JTAG implementation. You can follow instructions in this link for ARM Cortex M3.</p>

<ul>
<li><a href="http://www.downloads.seng.de/HowTo_ToolChain_STM32_Ubuntu.pdf"><code>http://www.downloads.seng.de/HowTo_ToolChain_STM32_Ubuntu.pdf</code></a></li>
</ul>


<p>As default, it uses 3333 port for GDB attachment, and 4444 port for telnet based debugging interface. To start, just type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>/bin/openocd -f <span class="o">[</span>module.cfg<span class="o">]</span> -f <span class="o">[</span>target.cfg<span class="o">]</span>
</span><span class='line'>    <span class="c">#module configuration files are in &#39;openOCD/share/openocd/scripts/interface&#39;</span>
</span><span class='line'>    <span class="c">#target configuration files are in &#39;openOCD/share/openocd/scripts/target</span>
</span></code></pre></td></tr></table></div></figure>


<p>To attach GDB,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>target remote localhost:3333
</span><span class='line'><span class="nv">$ </span>monitor halt                    <span class="c"># halts at current instruction, and shows registers</span>
</span><span class='line'><span class="nv">$ </span>monitor resume                  <span class="c"># resumes the program</span>
</span></code></pre></td></tr></table></div></figure>


<p>There exists two modes in JTAG, so you need to select proper one for your purpose.</p>

<ol>
<li>ARM Debug Mode &ndash; usually to connect jtag as above.</li>
<li>Boundary Scan Cell Mode &ndash; to check the connectivity between chips</li>
</ol>


<p>JTAG also can be chained as below, you should be careful when you follow TDI/TDO wires from the processor.</p>

<p><img class="center" src="http://program-paralel-pk2.konsultan-pendidikan-tinggi.biz/_buku_manual/_baca_blob.php?book=lain&td=1&kodegb=654px-Jtag_chain.png"></p>

<h2><a id="swd"></a> SWD</h2>

<p><img class="right" src="http://insino.github.io/images/2014/07/25/jlink.JPG" width="350" height="350"></p>

<p><strong>SWD</strong>, a short form of <em>Serial Wire Debug</em>, is a 2-pin electrical alternative JTAG interface that has the same JTAG protocol on top. It uses the existing GND connection. SWD uses an ARM CPU standard bi-directional wire protocol, defined in the ARM Debug Interface v5. This enables the debugger to become another AMBA bus master for access to system memory and peripheral or debug registers. Data rate is up to 4 Mbytes/sec at 50 MHz. SWD also has built-in error detection. On JTAG devices with SWD capability, the TMS and TCK are used as SWDIO and SWCLK signals, providing for dual-mode programmers.</p>

<p>Using <a href="http://www.segger.com/jlink-debug-probes.html"><em>Jlink</em></a> in the right picture, you can use both JTAG and SWD interface. Also, you can get pin alignment in the below link:</p>

<ul>
<li><a href="http://www.segger.com/interface-description.html"><code>http://www.segger.com/interface-description.html</code></a></li>
</ul>


<h2><a id="useful"></a> Some Useful Tools</h2>

<p><img class="left" src="http://insino.github.io/images/2014/07/25/logic.JPG" width="400" height="400">
<img class="center" src="http://insino.github.io/images/2014/07/25/jtagulator.JPG" width="400" height="400"></p>

<p><strong>Logic Analyzer</strong> is a good device when you have to see the signals from the pins if you don&rsquo;t have any datasheet. Put all the electrodes on each pin and measure the signal. Starting from RST, you may find right debugging interface. (I failed :/) The device on the left picture is logic analyzer from Quantasylum, you can access to it via this link:</p>

<ul>
<li><a href="http://www.quantasylum.com/content/Products/QA100.aspx"><code>Device Info</code></a></li>
<li><a href="https://www.quantasylum.com/content/Support/Downloads.aspx#QA100"><code>Drivers</code></a></li>
<li><a href="http://www.quantasylum.com/content/Portals/0/UploadedFiles/QA100%20Documentation.pdf"><code>Documentation</code></a></li>
</ul>


<p>The device on the right is <a href="http://www.grandideastudio.com/portfolio/jtagulator/"><strong>JTAGulator</strong></a>. JTAGulator is a cool device that automatically detects UART &amp; JTAG interface.  It&rsquo;s circuit is protected, so you don&rsquo;t have to worry about the over-voltage. There exists 24 channels which means that you can test 24 electrodes all at once. It connects to PC with Serial, so you can just press start button and wait having a cup of coffee.</p>

<h2><a id="con"></a> Conclusion</h2>

<p>There are many debugging interfaces supported by embedded devices. However, nowadays, embedded designers protect their these debugging features using password or other special input signals so-called &lsquo;Secure&rsquo;. Therefore, from now, we need to consider how we can access to right debugging interface when they are protected.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MindRDR - Google Glass App Control With Your Thoughts]]></title>
    <link href="http://insino.github.io/blog/2014/07/23/mindrdr-google-glass-app/"/>
    <updated>2014-07-23T14:33:32-07:00</updated>
    <id>http://insino.github.io/blog/2014/07/23/mindrdr-google-glass-app</id>
    <content type="html"><![CDATA[<p>A few weeks ago, there was a news from <a href="http://techcrunch.com/2014/07/09/forget-ok-glass-mindrdr-is-a-new-google-glass-app-that-you-control-with-your-thoughts/">TechCrunch</a> announcing <a href="http://www.thisplace.com/works/mindrdr"><code>MindRDR</code></a>, which is a Google Glass app that makes you control activites with your thoughts.</p>

<p><img class="center" src="http://insino.github.io/images/2014/07/23/tc.png"></p>

<!-- more -->


<h2><a id="mindrdr"></a>What is MindRDR?</h2>

<p>MindRDR is a Google Glass application which makes you take photos and share them on Twitter and Facebook with your <code>brain wave</code>. When you concentrate, it triggers to take photo and then you can share it again concentrating.</p>

<div style="text-align: center">
<iframe src="http://player.vimeo.com/video/99915694" width="500" height="281" frameborder="0" allowfullscreen></iframe>
</div>


<p>At first time, I thought that there was a new version of Google Glass has come out, but in fact, it is <strong>just a combination</strong> of <em>Google Glass</em> and <a href="http://store.neurosky.com/products/mindwave-1"><em>Mindwave</em></a> from <a href="http://neurosky.com/">NeuroSky</a>. This means that you need to buy additional device even you already have Google Glass! I would guess not many people would do that.</p>

<p><img class="center" src="http://insino.github.io/images/2014/07/23/glass_and_wave.png" width="500" height="500"></p>

<h2><a id="neurosky"></a>NeuroSky?</h2>

<p><a href="http://neurosky.com/"><em>NeuroSky</em></a> is a company selling EEG &amp; ECG based devices. They are at the forefront of biosensor innovation, and research new technologies related to our brain.</p>

<blockquote><p>NeuroSky is breaking the boundaries of body and mind monitoring and analysis for consumer-facing, wearable technology products. Our innovative biosensors are used in hundreds of products, brought to market by our partners, for body and mind health. These solutions capture, quantify and reveal unique health and wellness insights and give millions of people the ability to monitor and improve the performance body and mind.</p></blockquote>

<p>USC, Yale, Stanford, UCLA, MIT, and The University of Wollongong have adopted NeuroSky&rsquo;s EEG biosensor solutions for their work. There exist many apps using these devices in the NeuroSky Store, and you can use it.</p>

<p><img class="right" src="http://tahaogulcanyavuz.com/images/emotiv1.jpg" width="300" height="300">
<a href="http://emotiv.com/"><em>Emotiv</em></a> is another company. One of their famous product is <a href=""><strong>EPOC</strong></a> which has 14 electrodes to receive EEG signals. You can use this devices to measure EEG signals from positions: <em>AF3, F7, F3, FC5, T7, P7, O1, O2, P8, T8, FC6, F4, F8, AF4</em></p>

<p>I used Emotiv EPOC last semester for my term project in <em>Introduction to Brain IT</em>  held by <a href="http://brain.kaist.ac.kr/people_professor.html">Dae-Shik Kim</a>. I would post it later.</p>

<h2><a id="eeg_ecg"></a>EEG &amp; ECG?</h2>

<p><img class="left" src="http://upload.wikimedia.org/wikipedia/commons/b/bf/EEG_cap.jpg" width="200" height="200">
<a href="http://en.wikipedia.org/wiki/Electroencephalography"><em>EEG</em></a>, <em>Electroencephalography</em>, is the recording of electrical activity along the scalp. EEG measures voltage fluctuations resulting from ionic current flows within the neurons of the brain. In clinical contexts, EEG refers to the recording of the brain&rsquo;s spontaneous electrical activity over a short period of time, usually 20–40 minutes, as recorded from multiple electrodes placed on the scalp. Diagnostic applications generally focus on the spectral content of EEG, that is, the type of neural oscillations that can be observed in EEG signals.
There are previous researches related to P300, which is a kind of <em>Event Related Potential (ERP)</em>, a EEG signal which can be shown 300ms after a stimuli is given.</p>

<p><img class="right" src="http://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/ECGcolor.svg/345px-ECGcolor.svg.png" width="200" height="200">
<a href="http://en.wikipedia.org/wiki/Electrocardiography"><em>ECG</em></a>, <em>Electrocardiography</em>, also known as <em>EKG</em>, is the recording of the electrical activity of the heart. Traditionally this is in the form of a transthoracic (across the thorax or chest) interpretation of the electrical activity of the heart over a period of time, as detected by electrodes attached to the surface of the skin and recorded or displayed by a device external to the body. The recording produced by this noninvasive procedure is termed an electrocardiogram (also ECG or EKG). It is possible to record ECGs invasively using an implantable loop recorder.</p>

<p>There are also other kinds: <em>EOG</em>, <em>EMG</em>, and so on. Both EEG and ECG can be used as a reference when police forces a confession from a suspect. Don&rsquo;t lie :)</p>

<h2><a id="analysis"></a>MindRDR Source Code Analysis</h2>

<p>MindRDR is an open source project, so we can access it via <a href="https://github.com/ThisPlace/MindRDR">Github</a>. The code was really simple. They set some <em>TRIGGER_VALUE</em> which distinguish each state of the user. Starting from <em>MIND_TAKING_PHOTO</em> state, it changes to <em>MIND_SHARING</em>, and so on. The trigger value is given by the author in specific value. <em>Mindwave</em> also provides the state of device, so the authors if <em>MindRDR</em> also used this feature in their code.</p>

<figure class='code'><figcaption><span>MindRdrActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">thisplace</span><span class="o">.</span><span class="na">mindrdr</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* ... */</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MindRdrActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">DEBUG_TAG</span> <span class="o">=</span> <span class="s">&quot;MindCameraActivity&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* ... */</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">INTENSITY_TRIGGER</span> <span class="o">=</span> <span class="mi">80</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">LINE_VALUE_MULTIPLIER</span> <span class="o">=</span> <span class="n">LINE_RANGE</span> <span class="o">/</span> <span class="n">INTENSITY_TRIGGER</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">INTENSITY_CANCEL_TRIGGER</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MIND_TAKING_PHOTO</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MIND_SHARING</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MIND_DISABLED</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MIND_INITIALISING</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* ... */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="n">TGDevice</span><span class="o">.</span><span class="na">STATE_IDLE</span><span class="o">:</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">TGDevice</span><span class="o">.</span><span class="na">STATE_CONNECTING</span><span class="o">:</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* ... */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using state information, <em>MindRDR</em> decides what to do as below.</p>

<figure class='code'><figcaption><span>MindRdrActivity.java start:123</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mMindControlState</span> <span class="o">!=</span> <span class="n">MIND_DISABLED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mMindSession</span><span class="o">.</span><span class="na">updateMindData</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">LINE_RANGE</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">LINE_RANGE</span><span class="o">,</span> <span class="n">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">mMindSession</span><span class="o">.</span><span class="na">getAttention</span><span class="o">()</span> <span class="o">*</span> <span class="n">LINE_VALUE_MULTIPLIER</span><span class="o">));</span>
</span><span class='line'>    <span class="n">mLine</span><span class="o">.</span><span class="na">setTranslationY</span><span class="o">(</span><span class="n">LINE_START_Y</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mMindSession</span><span class="o">.</span><span class="na">getAttention</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">INTENSITY_TRIGGER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mMindControlState</span> <span class="o">==</span> <span class="n">MIND_TAKING_PHOTO</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mMindControlState</span> <span class="o">=</span> <span class="n">MIND_DISABLED</span><span class="o">;</span>
</span><span class='line'>        <span class="n">takePhoto</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">mMindControlState</span> <span class="o">==</span> <span class="n">MIND_SHARING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mMindControlState</span> <span class="o">=</span> <span class="n">MIND_DISABLED</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">tgDevice</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">tgDevice</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">upload</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">mMindSession</span><span class="o">.</span><span class="na">getAttention</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">INTENSITY_CANCEL_TRIGGER</span> <span class="o">&amp;&amp;</span> <span class="n">mMindControlState</span> <span class="o">==</span> <span class="n">MIND_SHARING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mCancelText</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">INVISIBLE</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mSendText</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">INVISIBLE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">initializeCamera</span><span class="o">();</span>
</span><span class='line'>      <span class="n">showTakePhotoView</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple, simple, simple. I don&rsquo;t know whether it works for everyone because EEG signal strength is different among people, and even different by environment.</p>

<h2><a id="lesson"></a>Lessons Learned</h2>

<blockquote><p>If you have an idea, think it twice, try faster.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Setup Octopress]]></title>
    <link href="http://insino.github.io/blog/2014/07/21/first-setup-octopress/"/>
    <updated>2014-07-21T16:01:17-07:00</updated>
    <id>http://insino.github.io/blog/2014/07/21/first-setup-octopress</id>
    <content type="html"><![CDATA[<p>I just set up my new homepage with octopress themed by whitespace.
<code>http://insino.github.io</code></p>

<!-- more -->


<h2><a id="setup"></a>Setup Octopress</h2>

<p>Setting up Octopress is quite easy. The instructions are all in the given <a href="http://octopress.org/docs/setup">url</a>: <code>http://octopress.org/docs/setup/</code>.</p>

<p>Before startup, I&rsquo;d recommend you to make your own io repository on <a href="https://github.com">github</a>. Making github io page is free, and what you have to do is only add an repository as
<code>http://github.com/your_github_id/your_github_id.github.io</code>. In my case, <code>http://github.com/insino/insino.github.io</code>. Then, download the source via <a href="https://github.com/imathis/octopress">git</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span></code></pre></td></tr></table></div></figure>


<p>Next, install dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash    <span class="c"># If you use rbenv, rehash to be able to run the bundle command</span>
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>Now, setting up the blog!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake install   <span class="c">#installing default blog page</span>
</span></code></pre></td></tr></table></div></figure>


<p>Really easy, huh?</p>

<h2><a id="branch"></a>Branch Definition</h2>

<p>Actually, there are two branches in Octopress.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  octopress git:<span class="o">(</span><span class="nb">source</span><span class="o">)</span> ✗ git branch -v
</span><span class='line'>  master c977b91 Merge pull request <span class="c">#1609 from alindeman/patch-1</span>
</span><span class='line'>  * <span class="nb">source </span>732c061 add twitter, github, facebook settings ini config.yml
</span></code></pre></td></tr></table></div></figure>


<p>You are going to work in <code>source</code> branch, in which you can do whatever you want. After you finish your work and you want to see what&rsquo;s going on try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake generate   <span class="c"># Generates posts and pages into the public directory</span>
</span><span class='line'>rake watch      <span class="c"># Watches source/ and sass/ for changes and regenerates</span>
</span><span class='line'>rake preview    <span class="c"># Watches, and mounts a webserver at http://localhost:4000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Octopress&rsquo;s preview webserver is <a href="http://www.sinatrarb.com/">Sinatra</a> which is really nice simple webserver. I already used this to make challenge pages for <a href="http://gon.kaist.ac.kr"><code>KAIST GoN</code></a>.
Anyway, if your hompage looks good, then make your actual output!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake deploy     <span class="c"># make your pages in &#39;_deploy/&#39; directory, push request on your master&#39;s branch</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done! Now enjoy your page at <code>http://your_github_id.github.io</code>.</p>
]]></content>
  </entry>
  
</feed>
